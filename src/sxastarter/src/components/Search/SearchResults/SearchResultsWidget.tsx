// This component was generated by @sitecore-search/cli

import { MagnifyingGlassIcon } from '@radix-ui/react-icons';
import { debounce } from '@sitecore-search/common';
import type { SearchResultsInitialState, SearchResultsStoreState } from '@sitecore-search/react';
import { WidgetDataType, useSearchResults, widget } from '@sitecore-search/react';

import ArticleItemCard from '../components/ArticleHorizontalCard/ArticleHorizontalCard';
import Filters from '../components/Filter/Filter';
import QueryResultsSummary from '../components/QueryResultsSummary/QueryResultsSummary';
import ResultsPerPage from '../components/ResultsPerPage/ResultsPerPage';
import SearchFacets from '../components/SearchFacets/SearchFacets';
import SearchPagination from '../components/SearchPagination/SearchPagination';
import SortOptions from '../components/SortOrder/SortOrder';
import Spinner from '../components/Spinner/Spinner';
import { useState } from 'react';

export type ArticleModel = {
  id: string;
  author?: string;
  type?: string;
  title?: string;
  name?: string;
  subtitle?: string;
  url?: string;
  description?: string;
  content_text?: string;
  image_url?: string;
  source_id?: string;
};
type ArticlesSearchResultsProps = {
  defaultSortType?: SearchResultsStoreState['sortType'];
  defaultPage?: SearchResultsStoreState['page'];
  defaultItemsPerPage?: SearchResultsStoreState['itemsPerPage'];
  defaultKeyphrase?: SearchResultsStoreState['keyphrase'];
};
type InitialState = SearchResultsInitialState<'itemsPerPage' | 'keyphrase' | 'page' | 'sortType'>;
export const SearchResultsComponent = ({
  defaultSortType = 'title_ascending',
  defaultPage = 1,
  defaultKeyphrase = '',
  defaultItemsPerPage = 24,
}: ArticlesSearchResultsProps) => {
  const {
    widgetRef,
    actions: { onKeyphraseChange, onItemClick },
    state: { sortType, page, itemsPerPage },
    queryResult: {
      isFetching,
      isLoading,
      data: {
        total_item: totalItems = 0,
        sort: { choices: sortChoices = [] } = {},
        facet: facets = [],
        content: articles = [],
      } = {},
    },
  } = useSearchResults<ArticleModel, InitialState>({
    state: {
      sortType: defaultSortType,
      page: defaultPage,
      itemsPerPage: defaultItemsPerPage,
      keyphrase: defaultKeyphrase,
    },
  });

  const [hasAnswer, setHasAnswer] = useState(false);
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const keyphraseChangeFn = debounce((e) => {
    if (e.target.value?.toLowerCase().search('how do i cook pancake') !== -1) {
      setHasAnswer(true);
    } else {
      setHasAnswer(false);
    }

    onKeyphraseChange({
      keyphrase: e.target.value,
    });
  }, 200);
  if (isLoading) {
    return (
      <div className="search-results-wrapper">
        <Spinner />
      </div>
    );
  }
  return (
    <div ref={widgetRef} className="search-results-wrapper">
      <div className="sitecore-input">
        <input
          onChange={(e) => keyphraseChangeFn(e)}
          data-testid="contentSRInput"
          defaultValue={defaultKeyphrase}
        />
        <MagnifyingGlassIcon />
      </div>
      <div className="sitecore-main-area">
        {isFetching && <Spinner />}
        {totalItems > 0 && (
          <>
            <section className="sitecore-left-area">
              <Filters />
              <SearchFacets facets={facets} />
            </section>
            <section className="sitecore-right-area">
              {hasAnswer && (
                <div className="position-left sitecore-preview-search-answer">
                  <h3>How do I cook pancakes?</h3>
                  <p>
                    Mix flour, baking powder, sugar, milk, eggs, and melted butter into a smooth
                    batter, then let it rest for a few minutes. Pour the batter onto a hot, greased
                    skillet, cook until bubbles form and flip to cook the other side until golden
                    brown.
                  </p>
                </div>
              )}

              {/* Sort Select */}
              <section className="sitecore-right-top-area">
                {totalItems && (
                  <QueryResultsSummary
                    currentPage={page}
                    itemsPerPage={itemsPerPage}
                    totalItems={totalItems}
                    totalItemsReturned={articles.length}
                  />
                )}
                <SortOptions options={sortChoices} selected={sortType} />
              </section>

              {/* Results */}
              <div className="sitecore-grid">
                {articles.map((a, index) => (
                  <ArticleItemCard key={a.id} article={a} index={index} onItemClick={onItemClick} />
                ))}
              </div>

              <div className="sitecore-page-controls">
                <ResultsPerPage defaultItemsPerPage={defaultItemsPerPage} />
                <SearchPagination currentPage={page} totalPages={totalPages} />
              </div>
            </section>
          </>
        )}
        {totalItems <= 0 && !isFetching && (
          <div className="sitecore-no-results">
            <h3>0 Results</h3>
          </div>
        )}
      </div>
    </div>
  );
};
const SearchResultsWidget = widget(
  SearchResultsComponent,
  WidgetDataType.SEARCH_RESULTS,
  'content'
);
export default SearchResultsWidget;
